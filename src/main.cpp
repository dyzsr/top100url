#include "../include/utils.h"
#include "../include/input.h"
#include "../include/output.h"
#include "../include/partition.h"
#include "../include/reduce.h"
#include "../include/merge.h"
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>

struct CMP {
	bool operator() (const UrlCnt &a, const UrlCnt &b)
	{
		return a.cnt > b.cnt;
	}
};

const int FILE_SZ = (1 << 26);

const char *part_dir = "._tmp_part";
const char *merge_dir = "._tmp_merge";

const int MERGE_NUM = 8;

int main(int argc, char *argv[]) {
	FILE *fpi_part = nullptr;

	if (argc == 2) {
		fpi_part = fopen(argv[1], "r");
	}
	else {
		exit(1);
	}

	char cmd[100];

	/** Create directory for partition files **/
	sprintf(cmd, "mkdir -p %s", part_dir);
	fprintf(stderr, "%s\n", cmd);
	system(cmd);

	/** Partition **/

	Partition partition(FILE_SZ);

	// fpart: files generated by Partition
	std::vector<FileInfo> fpart = partition(fpi_part, part_dir);
	fclose(fpi_part);

	fprintf(stderr, "Partition finished, %zu files generated.\n", fpart.size());

	/** Create directory for reduced and merged files **/
	sprintf(cmd, "mkdir -p %s", merge_dir);
	fprintf(stderr, "%s\n", cmd);
	system(cmd);

	/** Reduce **/

	// fmerge: files generated by Reduce & Merge
	std::vector<std::string> fmerge;
	for (size_t i = 0; i < fpart.size(); i++) {
		FILE *fpi_merge = fopen(fpart[i].filename.c_str(), "rb");
		
		char fname[40];
		sprintf(fname, "%s/iter-00-%05zu", merge_dir, i);
		FILE *fpo_merge = fopen(fname, "wb");

		// add filename to fmerge
		fmerge.emplace_back(fname);

		{
			Reduce reduce;
			Input in(fpi_merge, 1 << 26);
			Output out(fpo_merge, 1 << 26);
			reduce(&in, &out);
		}

		fclose(fpo_merge);
		fclose(fpi_merge);
	}

	/** Delete the directory for partition **/
	sprintf(cmd, "rm -rd %s", part_dir);
	fprintf(stderr, "%s\n", cmd);
	system(cmd);

	fprintf(stderr, "Reduce finished, %zu files generated.\n", fmerge.size());

	/** Merge **/

	// fnew: files of next iteration
	std::vector<std::string> fnew;
	size_t iter_num = 0;

	while (fmerge.size() > 1) {
		size_t sz = fmerge.size();
		++iter_num;

		fprintf(stderr, "Iteration %zu...\n", iter_num);
		
		for (size_t i = 0, k = 0; i < sz; i += MERGE_NUM, k++) {
			std::vector<FILE *> fs;
			std::vector<Input *> ins;
			for (size_t j = 0; i + j < sz && j < MERGE_NUM; j++) {
				fs.push_back(fopen(fmerge[i + j].c_str(), "rb"));
				ins.push_back(new Input(fs[j], 1 << 24));
			}

			char fname[40];
			sprintf(fname, "%s/iter-%02zu-%05zu", merge_dir, iter_num, k);
			fprintf(stderr, "open file %s\n", fname);
			FILE *fpo = fopen(fname, "wb");
			fnew.emplace_back(fname);

			{
				Output out(fpo, 1 << 24);
				Merge merge;
				auto res = merge(ins, &out);
				fprintf(stderr, "total input = %zu, total output = %zu\n", res.first, res.second);
			}

			fclose(fpo);
			for (size_t j = 0; i + j < sz && j < MERGE_NUM; j++) {
				delete ins[j];
				fclose(fs[j]);
			}
		}

		fmerge = fnew;
		fnew.clear();

		fprintf(stderr, "%zu files generated.\n", fmerge.size());
	}

	/** Collect the result **/

	if (fmerge.size()) {
		const char *result = fmerge[0].c_str();
		FILE *fpi_result = fopen(result, "rb");
		Input in(fpi_result, 1 << 24);

		std::priority_queue<UrlCnt, std::vector<UrlCnt>, CMP> pq;
		char *str = new char[65536];
		for (;;) {
			UrlCnt urlcnt;
			in.getdb(&urlcnt.hash);
			in.getdb(&urlcnt.cnt);
			size_t n = in.getsb(str, 65535);
			if (n == 0)
				break;
			urlcnt.url = std::string(str);

			pq.push(urlcnt);
			if (pq.size() > 100)
				pq.pop();
		}
		delete[] str;
		fclose(fpi_result);

		FILE *fpo_result = fopen("result.txt", "w");
		Output out(fpo_result, 1 << 24);

		fprintf(stderr, "===> result.txt\n");

		std::vector<UrlCnt> rankings;
		while (pq.size()) {
			UrlCnt urlcnt = pq.top(); pq.pop();
			rankings.push_back(urlcnt);
		}
		while (rankings.size()) {
			UrlCnt urlcnt = rankings.back();
			rankings.pop_back();
			out.puts(urlcnt.url.c_str());
			out.putd(urlcnt.cnt);
		}
		out.flush();

		fclose(fpo_result);
	}

	/** Delete tmp directory **/

	sprintf(cmd, "rm -rd %s", merge_dir);
	fprintf(stderr, "%s\n", cmd);
	system(cmd);

	return 0;
}
